plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'org.jetbrains.dokka'
    id 'com.vanniktech.maven.publish'
}

android {
    compileSdkVersion compile_sdk_version

    defaultConfig {
        minSdkVersion min_sdk_version
        targetSdkVersion compile_sdk_version

        versionCode 1
        version = "1.0.0"
        versionName "$version"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        externalNativeBuild {
            cmake {
                cFlags "-I./src/"
                cppFlags "-I./src/ -std=c++14 -fexceptions"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    externalNativeBuild {
        cmake {
            path file('src/main/jni/CMakeLists.txt')
        }
    }

    task swigBuild {
        exec {
            workingDir '.'
            commandLine 'sh', '-c', 'swig -c++ -java -package com.synaptictools.iperf -outdir src/main/java/com/synaptictools/iperf -o src/main/jni/iperf-jni-wrap.cpp src/main/jni/iperf-jni.i'
            ignoreExitValue true
        }
    }
}

task sourcesJar(type: Jar) {
    group = 'jar'
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    group = 'jar'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation libraries
    implementation arch_libraries
    kapt librariesKapt
    testImplementation testLibraries
    androidTestImplementation androidTestLibraries
}

static def grepFile(file, grepPattern) {
    def lines = []
    file.eachLine {
        line -> if (line.matches(grepPattern)) {
            lines << line
        }
    }
    return lines
}



task generate_iperf_version_string_h() {
    //
    // retrive some string constants from configure.ac and
    // write them to iperf_version.txt
    //

    def configure_ac_path   =   'iperf/src/main/jni/iperf3/configure.ac'
    def version_string_h_path = 'iperf/src/main/jni/iperf3/src/version.h'

    doLast {
        def lines
        def acinitLine
        def tokens

        // tokenize AC_INIT(...) to fetch version strings
        //
        // macro AC_INIT syntax is:
        //  AC_INIT (package, version, [bug-report],[tarname], [url])

        lines = grepFile(new File(configure_ac_path), ~/.*AC_INIT.*/)
        acinitLine = lines[0]
        tokens = acinitLine.split(/(\(|\)|,[ |\t]*)/)

        new File(version_string_h_path).withWriter { out ->

            out.println     "#define PACKAGE_NAME        \"${tokens[1]}\""
            out.println     "#define PACKAGE_VERSION     \"${tokens[2]}\""
            out.println     "#define IPERF_VERSION       \"${tokens[2]}\""
            out.println     "#define PACKAGE_STRING      \"${tokens[1]} ${tokens[2]}\""
            if (tokens.length > 3)
                out.println "#define PACKAGE_BUGREPORT   \"${tokens[3]}\""
            if (tokens.length > 4)
                out.println "#define PACKAGE_TARNAME     \"${tokens[4]}\""
            if (tokens.length > 5)
                out.println "#define PACKAGE_URL         \"${tokens[5]}\""
        }
    }
}

preBuild.dependsOn generate_iperf_version_string_h
